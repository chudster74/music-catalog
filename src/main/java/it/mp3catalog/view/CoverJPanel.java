/*
 *    Copyright 2012 Luca Tagliani
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
package it.mp3catalog.view;

import com.sun.media.jai.widget.DisplayJAI;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.awt.image.Raster;
import java.awt.image.RenderedImage;
import javax.media.jai.Interpolation;
import javax.media.jai.operator.ScaleDescriptor;
import org.imgscalr.Scalr;
import org.jdesktop.swingx.JXImagePanel;

/**
 *
 * @author luca
 */
public class CoverJPanel extends javax.swing.JPanel {

    private BufferedImage image;

    /**
     * Creates new form CoverJPanel
     */
    public CoverJPanel() {
        initComponents();
        coverJXImagePanel.setStyle(JXImagePanel.Style.SCALED_KEEP_ASPECT_RATIO);
        this.setAutoscrolls(true);
    }

    public BufferedImage getImage() {
        return image;
    }

    public boolean compareImages(BufferedImage image1, BufferedImage image2) {
        boolean ret; // Stores result.
        Raster r1 = image1.getData();
        Raster r2 = image2.getData();

        // Check image sizes and number of bands.  If there are different
        // then no need to compare images as they are definitely not equal.
        if (r1.getNumBands() != r2.getNumBands()
                || r1.getWidth() != r2.getWidth()
                || r1.getHeight() != r2.getHeight()) {
            ret = false;
        } else {
            // #Bands and image bounds match so compare each sample in turn.

            ret = true;

            search:
            for (int i = 0; i < r1.getNumBands(); ++i) {
                for (int x = 0; x < r1.getWidth(); ++x) {
                    for (int y = 0; y < r1.getHeight(); ++y) {
                        if (r1.getSample(x, y, i) != r2.getSample(x, y, i)) {
                            // At least one sample differs so result is false;
                            ret = false;
                            // Use labeled break to terminate all loops.
                            break search;
                        }
                    }
                }
            }
        }
        return ret;
    }

    public void setImage(BufferedImage image) {
        this.image = image;
            // display.set(scaleImage(this.image, getWidth() - 1, getHeight() - 1));
        coverJXImagePanel.setImage(image);
    }

    public RenderedImage scale(double xScale, double yScale) {
        RenderingHints qualityHints = new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        return ScaleDescriptor.create(image, new Float(xScale), new Float(yScale),
                new Float(0.0f), new Float(0.0f), Interpolation.getInstance(Interpolation.INTERP_BICUBIC), qualityHints).getRendering();
    }

    private BufferedImage scaleImage(final BufferedImage originalImage, int targetWidth, int targetHeight) {
        int origHeight = originalImage.getHeight();
        int origWidth = originalImage.getWidth();
        float heightScale = (float) origHeight / (float) targetHeight;
        float widthScale = (float) origWidth / (float) targetWidth;
        float scale = widthScale;
        if (heightScale > widthScale) {
            scale = heightScale;
        }
        targetHeight = Math.round((float) origHeight / scale);
        targetWidth = Math.round((float) origWidth / scale);
        return Scalr.resize(originalImage, targetHeight, targetWidth);

    }

//
//    @Override
//    public Dimension getPreferredSize() {
//        return new Dimension(image.getWidth(), image.getHeight());
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        coverJXImagePanel = new org.jdesktop.swingx.JXImagePanel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        javax.swing.GroupLayout coverJXImagePanelLayout = new javax.swing.GroupLayout(coverJXImagePanel);
        coverJXImagePanel.setLayout(coverJXImagePanelLayout);
        coverJXImagePanelLayout.setHorizontalGroup(
            coverJXImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 199, Short.MAX_VALUE)
        );
        coverJXImagePanelLayout.setVerticalGroup(
            coverJXImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(coverJXImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(coverJXImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
        coverJXImagePanel.setImage(image);
    }//GEN-LAST:event_formComponentResized
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXImagePanel coverJXImagePanel;
    // End of variables declaration//GEN-END:variables
}
