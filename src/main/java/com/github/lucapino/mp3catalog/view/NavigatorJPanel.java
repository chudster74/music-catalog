/*
 *    Copyright 2012 Luca Tagliani
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
package com.github.lucapino.mp3catalog.view;

import com.github.lucapino.mp3catalog.controller.DnDList;
import com.github.lucapino.mp3catalog.controller.DnDListModel;
import com.github.lucapino.mp3catalog.controller.PlayListItem;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.ListSelectionModel;
import org.jdesktop.swingx.JXTree;

/**
 *
 * @author luca
 */
public class NavigatorJPanel extends javax.swing.JPanel {

    MainJFrame frame;
    private JPopupMenu playListPopup;
    private DnDList<PlayListItem> list;
    private JScrollPane playlistScrollPane;

    /**
     * Creates new form NavigatorJPanel
     */
    public NavigatorJPanel(MainJFrame frame) {
        initComponents();
        this.frame = frame;
        list = new DnDList<>();
        list.setDragEnabled(true);
        list.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        DnDListModel<PlayListItem> model = new DnDListModel<>();
        list.setModel(model);

        playListPopup = new JPopupMenu();
        JMenuItem playItem = new JMenuItem("Play");
        playItem.addActionListener(new PlaylistActionListener(this));
        playListPopup.add(playItem);
        list.addMouseListener(new MouseAdapterImpl(this));


        playlistScrollPane = new JScrollPane(list);
        jTabbedPane1.add("Playlist", playlistScrollPane);
    }

    public DnDList<PlayListItem> getList() {
        return list;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        categoriesJXtree = new org.jdesktop.swingx.JXTree();

        setToolTipText("Navigator");

        jTabbedPane1.setFont(jTabbedPane1.getFont());

        jScrollPane1.setViewportView(categoriesJXtree);

        jTabbedPane1.addTab("tab1", jScrollPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public JXTree getCategoriesTree() {
        return categoriesJXtree;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXTree categoriesJXtree;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    private static class PlaylistActionListener implements ActionListener {

        private NavigatorJPanel panel;

        public PlaylistActionListener(NavigatorJPanel panel) {
            this.panel = panel;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            if (((JMenuItem) e.getSource()).getText().equalsIgnoreCase("play")) {
                PlayListItem item = panel.list.getModel().getElementAt(panel.list.getSelectedIndex());
                // panel.frame.getPlayerPanel().play();
                JOptionPane.showMessageDialog(panel.frame, "Play " + item.getPath() + " from playlist", "Play from playlist", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }

    private class MouseAdapterImpl extends MouseAdapter {

        private NavigatorJPanel panel;

        public MouseAdapterImpl(NavigatorJPanel panel) {
            this.panel = panel;
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            showPopup(e);
        }

        @Override
        public void mousePressed(MouseEvent e) {
            showPopup(e);
        }

        private void showPopup(MouseEvent e) {
            if (e.isPopupTrigger()) {
                panel.playListPopup.show(e.getComponent(), e.getX(), e.getY());
            }
        }

        @Override
        public void mouseClicked(MouseEvent e) {
            if (e.getClickCount() == 2) {
                PlayListItem item = list.getModel().getElementAt(list.getSelectedIndex());
                JOptionPane.showMessageDialog(panel.frame, "Riproduci\n" + item.getPath(), "Riproduci con doppio click", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }
}
